# -*- coding: utf-8 -*-
"""plot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pPjXUI8LmgHBUHsuqIl7BxTzQJiZDCuA

# Visualization of Water Quality Index (WQI)

This notebook is focused on visualizing the Water Quality Index (WQI) across different regions and time periods.
Using scatter plots, heatmaps, and geographical visualizations, we explore trends in water quality and identify critical areas.

## Steps Covered:
1. Loading the preprocessed WQI data
2. Preparing the data for visualization (handling geographical coordinates)
3. Plotting the WQI values on geographical maps
4. Generating temporal heatmaps for visual insights
"""

import pandas as pd
import re
import numpy as np
import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import colors

data = pd.read_csv('/content/AWQI_India_2012.csv')
print(data.head())

# Function to convert coordinates from DMS (Degrees, Minutes, Seconds) format to decimal degrees
def dms_to_decimal(dms_str, default_direction=None):
    # Match degrees, minutes, seconds, and optional hemisphere
    dms_regex = re.match(r"(\d+)Â°(\d+)'([\d.]+)\"? ?([NSEW]?)", dms_str.strip())

    if dms_regex:
        degrees = int(dms_regex.group(1))
        minutes = int(dms_regex.group(2))
        seconds = float(dms_regex.group(3))
        # Use captured direction if present, otherwise apply the default
        direction = dms_regex.group(4) if dms_regex.group(4) else default_direction

        # Calculate decimal degrees
        decimal = degrees + minutes / 60 + seconds / 3600

        # For South and West coordinates, negate the decimal value
        if direction in ['S', 'W']:
            decimal *= -1

        return decimal
    else:
        raise ValueError(f"Invalid DMS format: {dms_str}")

# Function to normalize and convert coordinates for consistency
def convert_coordinate(coord_str, default_direction):
    # Check if it's already in decimal format (by checking for a decimal point)
    try:
        # If it can be converted to a float, it's already in decimal
        return float(coord_str)
    except ValueError:
        try:
        # If it's not a float, assume it's in DMS format and convert
         return dms_to_decimal(coord_str, default_direction)
        except ValueError:
          return None

data['Latitude_Decimal'] = data['LATITUDE'].apply(lambda x: convert_coordinate(x, 'N'))
data['Longitude_Decimal'] = data['LONGITUDE'].apply(lambda x: convert_coordinate(x, 'E'))

data = data.dropna(subset=['Latitude_Decimal', 'Longitude_Decimal'])



print(data['Latitude_Decimal'])
print(data['Longitude_Decimal'])

data = data.reset_index(drop=True)

# Load country and state boundary shapefiles and ensure they are in the same CRS
country_boundary_path = '/content/IndiaBoundary.shp'
state_boundary_path = '/content/India-States.shp'

# Load geographical shapefiles for the country and state boundaries
country_boundary = gpd.read_file(country_boundary_path).to_crs(epsg=4326)
# Load geographical shapefiles for the country and state boundaries
state_boundary = gpd.read_file(state_boundary_path).to_crs(epsg=4326)

# Plot the geographical boundaries of the regions or states
# Create a figure and axis with matplotlib
fig, ax = plt.subplots(figsize=(10, 12))

# Plot the country boundary
# Plot the geographical boundaries of the regions or states
country_boundary.plot(ax=ax, edgecolor="black", linewidth=2, facecolor="none")

# Plot state boundaries
# Plot the geographical boundaries of the regions or states
state_boundary.plot(ax=ax, edgecolor="grey", linewidth=1, facecolor="none")

# Normalize the water quality index values for proportional circle sizing
max_index = data['AWQI'].max()
min_index = data['AWQI'].min()

# Create a scatter plot to visualize WQI values at specific geographical locations
# Plot the points using scatter and color them by index
scatter = ax.scatter(
    data['Longitude_Decimal'], data['Latitude_Decimal'],
    c=data['AWQI'],  # Color based on index
    s = 10,
    cmap='RdYlGn', alpha=0.6, edgecolor="k"
)

# Add color bar for the water quality index
# Create a scatter plot to visualize WQI values at specific geographical locations
cbar = plt.colorbar(scatter, ax=ax, orientation="vertical")
cbar.set_label("Water Quality Index")

# Set labels and title
ax.set_xlabel("Longitude")
ax.set_ylabel("Latitude")
ax.set_title("Water Quality Index Across India with State Boundaries")

# Display the plot to the user
plt.show()





